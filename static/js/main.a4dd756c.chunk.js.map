{"version":3,"sources":["components/Cell/Cell.tsx","components/Board/Board.tsx","components/Container/Container.tsx","App.tsx","index.tsx"],"names":["Cell","props","handleClick","bind","this","flipCellsAroundMe","classes","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","every","cell","setState","tblBoard","flipCellsAround","makeTable","defaultProps","Container","children","App","ReactDOM","render","document","getElementById"],"mappings":"8RA0CeA,E,kDAvBb,WAAYC,GAAmB,IAAD,8BAC5B,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFS,E,+CAQ9B,WACEC,KAAKH,MAAMI,sB,oBAGb,WAKE,IAAMC,EAAU,QAAUF,KAAKH,MAAMM,MAAQ,YAAc,IAE3D,OAAO,oBAAIC,UAAWF,EAASG,QAASL,KAAKF,kB,GApB9BQ,aCcbC,G,kNAaJC,MAAoB,CAClBC,QAAQ,EACRC,MAAO,EAAKC,e,iDAOd,WAGE,IAFA,IAAMD,EAAQ,GAELE,EAAI,EAAGA,EAAIZ,KAAKH,MAAMgB,MAAQD,IAAK,CAG1C,IAFA,IAAME,EAAM,GAEHC,EAAI,EAAGA,EAAIf,KAAKH,MAAMmB,MAAQD,IACrCD,EAAIG,KAAKC,KAAKC,SAAWnB,KAAKH,MAAMuB,qBAGtCV,EAAMO,KAAKH,GAEb,OAAOJ,I,6BAMT,SAAgBW,GAAgB,IAAD,EACJrB,KAAKH,MAAtBmB,EADqB,EACrBA,MAAOH,EADc,EACdA,MACTH,EAAQV,KAAKQ,MAAME,MAFI,EAGdW,EAAMC,MAAM,KAAKC,IAAIC,QAHP,mBAGtBZ,EAHsB,KAGnBG,EAHmB,KAKvBU,EAAW,SAACb,EAAWG,GAIvBA,GAAK,GAAKA,EAAIC,GAAUJ,GAAK,GAAKA,EAAIC,IACxCH,EAAME,GAAGG,IAAML,EAAME,GAAGG,KAO5BU,EAASb,EAAGG,GACZU,EAASb,EAAGG,EAAI,GAChBU,EAASb,EAAGG,EAAI,GAChBU,EAASb,EAAI,EAAGG,GAChBU,EAASb,EAAI,EAAGG,GAKhB,IAAMN,EAASC,EAAMgB,OAAM,SAACZ,GAAD,OAASA,EAAIY,OAAM,SAACC,GAAD,OAAUA,QAExD3B,KAAK4B,SAAS,CAAElB,QAAOD,a,uBAMzB,WAGE,IAHW,IAAD,OACJoB,EAAW,GAERjB,EAAI,EAAGA,EAAIZ,KAAKH,MAAMgB,MAAQD,IAAK,CAG1C,IAFA,IAAME,EAAM,GAD8B,WAGjCC,GACP,IAAMM,EAAK,UAAMT,EAAN,YAAWG,GAEtBD,EAAIG,KACF,cAAC,EAAD,CAEEd,MAAO,EAAKK,MAAME,MAAME,GAAGG,GAC3Bd,kBAAmB,kBAAM,EAAK6B,gBAAgBT,KAFzCA,KALFN,EAAI,EAAGA,EAAIf,KAAKH,MAAMmB,MAAQD,IAAM,EAApCA,GAWTc,EAASZ,KAAK,6BAAaH,GAAJF,IAEzB,OACE,uBAAOR,UAAU,QAAjB,SACE,gCAAQyB,Q,oBAKd,WACE,OACE,cAAC,WAAD,UACG7B,KAAKQ,MAAMC,OACV,sBAAKL,UAAU,SAAf,UACE,sBAAMA,UAAU,cAAhB,iBACA,sBAAMA,UAAU,YAAhB,qBAGF,gCACE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,cAAf,oBACA,qBAAKA,UAAU,YAAf,oBAEDJ,KAAK+B,qB,GAlHEzB,cAAdC,EAIGyB,aAA2B,CAChCnB,MAAO,EACPG,MAAO,EACPI,oBAAqB,GAmHVb,QC5IA0B,G,MANa,SAACpC,GAAW,IAC9BqC,EAAarC,EAAbqC,SAER,OAAO,qBAAK9B,UAAU,YAAf,SAA4B8B,MCUtBC,E,4JATb,WACE,OACE,cAAC,EAAD,UACE,cAAC,EAAD,U,GAJU7B,a,MCClB8B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.a4dd756c.chunk.js","sourcesContent":["import { Component } from \"react\";\r\n\r\n/**\r\n * Imports styling\r\n */\r\nimport \"./Cell.css\";\r\n\r\n/**\r\n * Defines the props interface\r\n */\r\ninterface CellProps {\r\n  isLit: boolean;\r\n  flipCellsAroundMe: () => void;\r\n}\r\n\r\n/**\r\n * Displays the component\r\n */\r\nclass Cell extends Component<CellProps> {\r\n  constructor(props: CellProps) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Handles the event when clicking a cell\r\n   */\r\n  handleClick() {\r\n    this.props.flipCellsAroundMe();\r\n  }\r\n\r\n  render() {\r\n    /**\r\n     * Handles the styling applied to the cell\r\n     * based on the isLit prop\r\n     */\r\n    const classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\r\n\r\n    return <td className={classes} onClick={this.handleClick} />;\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import { Fragment, Component } from \"react\";\r\n\r\n/**\r\n * Imports components\r\n */\r\nimport Cell from \"../Cell\";\r\n\r\n/**\r\n * Imports styling\r\n */\r\nimport \"./Board.css\";\r\n\r\n/**\r\n * Defines the props interface\r\n */\r\ninterface BoardProps {\r\n  nrows?: number;\r\n  ncols?: number;\r\n  chanceLightStartsOn?: number;\r\n}\r\n\r\n/**\r\n * Defines the state interface\r\n */\r\ninterface BoardState {\r\n  hasWon: boolean;\r\n  board: boolean[][];\r\n}\r\n\r\n/**\r\n * Displays the component\r\n */\r\nclass Board extends Component<BoardProps, BoardState> {\r\n  /**\r\n   * Defines the default props\r\n   */\r\n  static defaultProps: BoardProps = {\r\n    nrows: 5,\r\n    ncols: 5,\r\n    chanceLightStartsOn: 1\r\n  };\r\n\r\n  /**\r\n   * Defines the default state\r\n   */\r\n  state: BoardState = {\r\n    hasWon: false,\r\n    board: this.createBoard()\r\n  };\r\n\r\n  /**\r\n   * Handles creating a board with n rows\r\n   * each cell randomly lit or unlit\r\n   */\r\n  createBoard() {\r\n    const board = [];\r\n\r\n    for (let y = 0; y < this.props.nrows!; y++) {\r\n      const row = [];\r\n\r\n      for (let x = 0; x < this.props.ncols!; x++) {\r\n        row.push(Math.random() < this.props.chanceLightStartsOn!);\r\n      }\r\n\r\n      board.push(row);\r\n    }\r\n    return board;\r\n  }\r\n\r\n  /**\r\n   * Handles changing a cell: update board & determine if winner\r\n   */\r\n  flipCellsAround(coord: string) {\r\n    const { ncols, nrows } = this.props;\r\n    const board = this.state.board;\r\n    const [y, x] = coord.split(\"-\").map(Number);\r\n\r\n    const flipCell = (y: number, x: number) => {\r\n      /**\r\n       * If coord is actually on board, flip it\r\n       */\r\n      if (x >= 0 && x < ncols! && y >= 0 && y < nrows!) {\r\n        board[y][x] = !board[y][x];\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Handles flipping this cell and the cells around it\r\n     */\r\n    flipCell(y, x); //Flip initial cell\r\n    flipCell(y, x - 1); //flip left\r\n    flipCell(y, x + 1); //flip right\r\n    flipCell(y - 1, x); //flip below\r\n    flipCell(y + 1, x); //flip above\r\n\r\n    /**\r\n     * win when every cell is turned off\r\n     */\r\n    const hasWon = board.every((row) => row.every((cell) => cell));\r\n\r\n    this.setState({ board, hasWon });\r\n  }\r\n\r\n  /**\r\n   * Renders game board or winning message.\r\n   */\r\n  makeTable() {\r\n    const tblBoard = [];\r\n\r\n    for (let y = 0; y < this.props.nrows!; y++) {\r\n      const row = [];\r\n\r\n      for (let x = 0; x < this.props.ncols!; x++) {\r\n        const coord = `${y}-${x}`;\r\n\r\n        row.push(\r\n          <Cell\r\n            key={coord}\r\n            isLit={this.state.board[y][x]}\r\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\r\n          />\r\n        );\r\n      }\r\n      tblBoard.push(<tr key={y}>{row}</tr>);\r\n    }\r\n    return (\r\n      <table className=\"Board\">\r\n        <tbody>{tblBoard}</tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        {this.state.hasWon ? (\r\n          <div className=\"winner\">\r\n            <span className=\"neon-orange\">YOU</span>\r\n            <span className=\"neon-blue\">WIN!</span>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className=\"Board-title\">\r\n              <div className=\"neon-orange\">Lights</div>\r\n              <div className=\"neon-blue\">Out</div>\r\n            </div>\r\n            {this.makeTable()}\r\n          </div>\r\n        )}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","/**\r\n * Imports styling\r\n */\r\nimport \"./Container.css\";\r\n\r\n/**\r\n * Displays the component\r\n */\r\nconst Container: React.FC = (props) => {\r\n  const { children } = props;\r\n\r\n  return <div className=\"Container\">{children}</div>;\r\n};\r\n\r\nexport default Container;\r\n","import { Component } from \"react\";\n\n/**\n * Imports components\n */\nimport Board from \"./components/Board\";\nimport Container from \"./components/Container\";\n\n/**\n * Displays the component\n */\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <Board />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\n\n/**\n * Imports components\n */\nimport App from \"./App\";\n\n/**\n * Imports styling\n */\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}