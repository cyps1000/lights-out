{"version":3,"sources":["components/Cell/Cell.tsx","components/Board/Board.tsx","App.tsx","index.tsx"],"names":["Cell","handleClick","props","flipCellsAroundMe","classes","this","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","every","cell","setState","tblBoard","flipCellsAround","makeTable","defaultProps","App","ReactDOM","render","document","getElementById"],"mappings":"sRAqCeA,E,4MAfbC,YAAc,WACZ,EAAKC,MAAMC,qB,4CAGb,WAKE,IAAMC,EAAU,QAAUC,KAAKH,MAAMI,MAAQ,YAAc,IAE3D,OAAO,oBAAIC,UAAWH,EAASI,QAASH,KAAKJ,kB,GAf9BQ,aCcbC,G,kNAaJC,MAAoB,CAClBC,QAAQ,EACRC,MAAO,EAAKC,e,iDAOd,WAGE,IAFA,IAAMD,EAAQ,GAELE,EAAI,EAAGA,EAAIV,KAAKH,MAAMc,MAAQD,IAAK,CAG1C,IAFA,IAAME,EAAM,GAEHC,EAAI,EAAGA,EAAIb,KAAKH,MAAMiB,MAAQD,IACrCD,EAAIG,KAAKC,KAAKC,SAAWjB,KAAKH,MAAMqB,qBAGtCV,EAAMO,KAAKH,GAEb,OAAOJ,I,6BAMT,SAAgBW,GAAgB,IAAD,EACJnB,KAAKH,MAAtBiB,EADqB,EACrBA,MAAOH,EADc,EACdA,MACTH,EAAQR,KAAKM,MAAME,MAFI,EAGdW,EAAMC,MAAM,KAAKC,IAAIC,QAHP,mBAGtBZ,EAHsB,KAGnBG,EAHmB,KAKvBU,EAAW,SAACb,EAAWG,GAIvBA,GAAK,GAAKA,EAAIC,GAAUJ,GAAK,GAAKA,EAAIC,IACxCH,EAAME,GAAGG,IAAML,EAAME,GAAGG,KAO5BU,EAASb,EAAGG,GACZU,EAASb,EAAGG,EAAI,GAChBU,EAASb,EAAGG,EAAI,GAChBU,EAASb,EAAI,EAAGG,GAChBU,EAASb,EAAI,EAAGG,GAKhB,IAAMN,EAASC,EAAMgB,OAAM,SAACZ,GAAD,OAASA,EAAIY,OAAM,SAACC,GAAD,OAAUA,QAExDzB,KAAK0B,SAAS,CAAElB,QAAOD,a,uBAMzB,WAGE,IAHW,IAAD,OACJoB,EAAW,GAERjB,EAAI,EAAGA,EAAIV,KAAKH,MAAMc,MAAQD,IAAK,CAG1C,IAFA,IAAME,EAAM,GAD8B,WAGjCC,GACP,IAAMM,EAAK,UAAMT,EAAN,YAAWG,GAEtBD,EAAIG,KACF,cAAC,EAAD,CAEEd,MAAO,EAAKK,MAAME,MAAME,GAAGG,GAC3Bf,kBAAmB,kBAAM,EAAK8B,gBAAgBT,KAFzCA,KALFN,EAAI,EAAGA,EAAIb,KAAKH,MAAMiB,MAAQD,IAAM,EAApCA,GAWTc,EAASZ,KAAK,6BAAaH,GAAJF,IAEzB,OACE,uBAAOR,UAAU,QAAjB,SACE,gCAAQyB,Q,oBAKd,WACE,OACE,cAAC,WAAD,UACG3B,KAAKM,MAAMC,OACV,sBAAKL,UAAU,SAAf,UACE,sBAAMA,UAAU,cAAhB,iBACA,sBAAMA,UAAU,YAAhB,qBAGF,gCACE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,cAAf,oBACA,qBAAKA,UAAU,YAAf,oBAEDF,KAAK6B,qB,GAlHEzB,cAAdC,EAIGyB,aAA2B,CAChCnB,MAAO,EACPG,MAAO,EACPI,oBAAqB,KAmHVb,QCjIA0B,G,kKATb,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,cAAC,EAAD,U,GAJUE,c,MCHlB4B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b559db75.chunk.js","sourcesContent":["import { Component } from \"react\";\n\n/**\n * Imports styling\n */\nimport \"./Cell.css\";\n\n/**\n * Defines the props interface\n */\ninterface CellProps {\n  isLit: boolean;\n  flipCellsAroundMe: () => void;\n}\n\n/**\n * Displays the component\n */\nclass Cell extends Component<CellProps> {\n  /**\n   * Handles the event when clicking a cell\n   */\n  handleClick = () => {\n    this.props.flipCellsAroundMe();\n  };\n\n  render() {\n    /**\n     * Handles the styling applied to the cell\n     * based on the isLit prop\n     */\n    const classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return <td className={classes} onClick={this.handleClick} />;\n  }\n}\n\nexport default Cell;\n","import { Fragment, Component } from \"react\";\n\n/**\n * Imports components\n */\nimport Cell from \"../Cell\";\n\n/**\n * Imports styling\n */\nimport \"./Board.css\";\n\n/**\n * Defines the props interface\n */\ninterface BoardProps {\n  nrows?: number;\n  ncols?: number;\n  chanceLightStartsOn?: number;\n}\n\n/**\n * Defines the state interface\n */\ninterface BoardState {\n  hasWon: boolean;\n  board: boolean[][];\n}\n\n/**\n * Displays the component\n */\nclass Board extends Component<BoardProps> {\n  /**\n   * Defines the default props\n   */\n  static defaultProps: BoardProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25,\n  };\n\n  /**\n   * Defines the default state\n   */\n  state: BoardState = {\n    hasWon: false,\n    board: this.createBoard(),\n  };\n\n  /**\n   * Handles creating a board with n rows\n   * each cell randomly lit or unlit\n   */\n  createBoard() {\n    const board = [];\n\n    for (let y = 0; y < this.props.nrows!; y++) {\n      const row = [];\n\n      for (let x = 0; x < this.props.ncols!; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn!);\n      }\n\n      board.push(row);\n    }\n    return board;\n  }\n\n  /**\n   * Handles changing a cell: update board & determine if winner\n   */\n  flipCellsAround(coord: string) {\n    const { ncols, nrows } = this.props;\n    const board = this.state.board;\n    const [y, x] = coord.split(\"-\").map(Number);\n\n    const flipCell = (y: number, x: number) => {\n      /**\n       * If coord is actually on board, flip it\n       */\n      if (x >= 0 && x < ncols! && y >= 0 && y < nrows!) {\n        board[y][x] = !board[y][x];\n      }\n    };\n\n    /**\n     * Handles flipping this cell and the cells around it\n     */\n    flipCell(y, x); //Flip initial cell\n    flipCell(y, x - 1); //flip left\n    flipCell(y, x + 1); //flip right\n    flipCell(y - 1, x); //flip below\n    flipCell(y + 1, x); //flip above\n\n    /**\n     * win when every cell is turned off\n     */\n    const hasWon = board.every((row) => row.every((cell) => cell));\n\n    this.setState({ board, hasWon });\n  }\n\n  /**\n   * Renders game board or winning message.\n   */\n  makeTable() {\n    const tblBoard = [];\n\n    for (let y = 0; y < this.props.nrows!; y++) {\n      const row = [];\n\n      for (let x = 0; x < this.props.ncols!; x++) {\n        const coord = `${y}-${x}`;\n\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return (\n      <table className=\"Board\">\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n  }\n\n  render() {\n    return (\n      <Fragment>\n        {this.state.hasWon ? (\n          <div className=\"winner\">\n            <span className=\"neon-orange\">YOU</span>\n            <span className=\"neon-blue\">WIN!</span>\n          </div>\n        ) : (\n          <div>\n            <div className=\"Board-title\">\n              <div className=\"neon-orange\">Lights</div>\n              <div className=\"neon-blue\">Out</div>\n            </div>\n            {this.makeTable()}\n          </div>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default Board;\n","import { Component } from \"react\";\n\n/**\n * Imports components\n */\nimport Board from \"./components/Board\";\n\n/**\n * Imports Styling\n */\nimport \"./App.css\";\n\n/**\n * Displays the component\n */\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\n\n/**\n * Imports components\n */\nimport App from \"./App\";\n\n/**\n * Imports styling\n */\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}